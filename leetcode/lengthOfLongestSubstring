class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        substring = []
        longestsubstring = 0
        for letter in s:
            if letter in substring:
                if len(substring) >= longestsubstring:
                    longestsubstring = len(substring)
                    substring = [letter]   
            else:
                substring.append(letter)
        if len(substring)>= longestsubstring:
            longestsubstring = len(substring)
        
        substring = []
        for letter in s[::-1]:
            print(s[::-1])
            if letter in substring:
                if len(substring) >= longestsubstring:
                    
                    longestsubstring = len(substring)
                substring = [letter]   
            else:
                    substring.append(letter)
                    print(substring)
                   
        if len(substring)>= longestsubstring:
            longestsubstring = len(substring)
            
        return(longestsubstring)
        
solution = Solution()
print(solution.lengthOfLongestSubstring("ipmd"))

# Why are dictionary operations of time complexity O(1)